description = 'Spring Nanotrader'

apply plugin: 'base'
apply plugin: 'idea'
apply plugin: 'eclipse'

allprojects {
	group = 'org.springframework.nanotrader'
	
	repositories {
		flatDir dirs: ["${gradle.gradleHomeDir}/lib"]
                maven { url  'http://repo.springsource.org' }
		maven { url  'http://maven.springframework.org/release' }
		maven { url  'http://repo.springsource.org/libs-milestone' }
		maven { url  'http://spring-roo-repository.springsource.org/release' }
		mavenCentral()
		maven { url 'http://maven.springframework.org/snapshot' }
		maven { url 'http://repo.springsource.org/snapshot'}
	}
}


subprojects { subproject ->

	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin:'eclipse-wtp'
	
	// ensure JDK 7 compatibility (GRADLE-18; INT-1578)
	sourceCompatibility=1.7
	targetCompatibility=1.7
	ext.commonsNetVersion = '3.0.1'
	ext.commonsLangVersion = '3.0.1'
	ext.easymockVersion = '3.2'
	ext.groovyVersion = '1.8.5'
	ext.javaxActivationVersion = '1.1.1'
	ext.junitVersion = '4.12'
	ext.log4jVersion = '1.2.12'
	ext.mockitoVersion = '1.9.0'
	ext.springVersion = '4.1.2.RELEASE'
	ext.springAmqpVersion = '1.1.0.RELEASE'
	ext.springDataMongoVersion = '1.0.0.RELEASE'
	ext.springDataRedisVersion = '1.0.0.RELEASE'
	ext.springGemfireVersion = '1.1.0.RELEASE'
	ext.springSecurityVersion = '3.1.0.RELEASE'
	ext.springSocialTwitterVersion = '1.0.1.RELEASE'
	ext.springWsVersion = '2.0.3.RELEASE'
	ext.springRooVersion = '1.2.0.RELEASE'
	ext.springCloudVersion = '1.1.0.RELEASE'
	ext.springCloudVersion = '1.0.0.RELEASE'
	ext.javaxInjectVersion = '1'
	ext.servletApiVersion = '3.0.1'
	ext.dozerVersion='5.3.2'
	ext.h2Version="1.4.185"
	ext.webAppDirName = 'src/main/webapp'
	// add the natures and builders to your project
	eclipse.project {
		natures 'org.eclipse.wst.common.project.facet.core.nature', 'org.eclipse.wst.common.modulecore.ModuleCoreNature'
		natures += 'org.springframework.ide.eclipse.core.springnature'
		buildCommand 'org.eclipse.wst.common.project.facet.core.builder'
		buildCommand 'org.eclipse.wst.validation.validationbuilder'
	}
        eclipse {
		classpath {
			defaultOutputDir = file('build')
		}
	}

	sourceSets {
		test {
			resources {
				srcDirs = [
					'src/test/resources',
					'src/test/java'
				]
			}
		}
	}

	// dependencies that are common across all java projects
	dependencies {
		compile "log4j:log4j:$log4jVersion"
		compile "org.slf4j:slf4j-log4j12:1.7.11"
		testCompile "junit:junit:$junitVersion"
		testCompile "org.mockito:mockito-core:1.10.19"
		testCompile "org.springframework:spring-test:$springVersion"
	}

	// enable all compiler warnings; individual projects may customize further
	[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:-options']

	test {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)
		systemProperties['spring.profiles.active'] = 'test'
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	install {
		repositories.mavenInstaller { customizePom(pom, subproject) }
	}

}

task cleanDist(type: Delete)  {
   description "Deletes $rootDir/dist directory"
   delete file("$rootDir/dist")
}

project('spring-nanotrader-chaos') {
	description = 'Spring Nanotrader Chaos Utilities'
}

project('spring-nanotrader-service-support') {
	description = 'Spring Nanotrader Data Service Support'

	dependencies {
		testCompile files(project(":spring-nanotrader-data").sourceSets.test.resources.srcDirs)
		
		compile project(":spring-nanotrader-data")
		compile "org.springframework.integration:spring-integration-amqp:$springVersion" 
		compile "net.sf.dozer:dozer:$dozerVersion"
		compile "com.fasterxml.jackson.core:jackson-databind:2.5.1"
		compile  "joda-time:joda-time:1.6"
		compile "com.gemstone.gemfire:gemfire:6.6.3"	
		compile  "org.springframework.data:spring-data-gemfire:1.1.1.RELEASE"
	    compile "net.schmizz:sshj:0.8.1"
        }
}

project('spring-nanotrader-data') {
	description = 'Spring Nanotrader Data'
	dependencies {
		// Spring Cloud
		compile "org.springframework.cloud:spring-cloud-spring-service-connector:$springCloudVersion"
		compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:$springCloudVersion"
		
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.springframework:spring-orm:$springVersion"
		compile "org.springframework:spring-aspects:$springVersion"
		compile "org.springframework.integration:spring-integration-core:$springVersion"
		compile "org.springframework.integration:spring-integration-amqp:$springVersion"
		compile "org.springframework.data:spring-data-jpa:1.8.0.RELEASE"
		compile "javax.validation:validation-api:1.0.0.GA"
		compile "commons-dbcp:commons-dbcp:1.4"
		compile "org.hibernate:hibernate-core:4.3.6.Final"
		compile "mysql:mysql-connector-java:5.1.31"
		
		compile ("org.hibernate:hibernate-entitymanager:4.3.6.Final") {
			exclude module: 'cglib'
		}

		compile "org.codehaus.jackson:jackson-mapper-asl:1.9.2"
        compile "com.h2database:h2:$h2Version"
	}
}

project('tools') {
	apply plugin: 'groovy'

	repositories {
	    mavenCentral()
	}

	configurations {
	 compile
	}

	jar {
	    archiveName 'DataGenerator.zip'
	    fileMode 0755
	    into('libs') {
	        from configurations.compile
	     }
	}

	task release(dependsOn: assemble) << {
	    copy {
            description "Copy artifacts to $rootDir/dist"
	        from file("build/libs")
	        into file("$rootDir/dist")
                include '*.zip'
	    }
	}

	dependencies {
	    compile localGroovy()
	    compile 'org.apache.commons:commons-lang3:3.1'
	    compile 'commons-beanutils:commons-beanutils-core:1.8.3'
	    compile 'commons-codec:commons-codec:1.4'
	    compile 'commons-collections:commons-collections:3.2.1'
	    compile 'commons-logging:commons-logging:1.1.1'
	    compile 'net.sf.ezmorph:ezmorph:1.0.6'
	    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'
	    compile 'org.apache.httpcomponents:httpclient:4.1.3'
	    compile 'org.apache.httpcomponents:httpcore:4.1.4'
	    compile 'net.sf.json-lib:json-lib:2.3:jdk15@jar'
	    compile 'net.sourceforge.nekohtml:nekohtml:1.9.15'
	    compile 'xerces:xercesImpl:2.10.0'
	    compile 'net.sf.opencsv:opencsv:2.0'
	    compile 'postgresql:postgresql:9.1-901.jdbc4'
	    compile 'org.apache.ant:ant:1.8.3'
	}
}

project('spring-nanotrader-services') {
	apply plugin: 'war'

	description = 'Spring Nanotrader Services'
        
	dependencies {
		compile project(":spring-nanotrader-service-support")
		compile project(":spring-nanotrader-chaos")
		compile "org.springframework:spring-webmvc:$springVersion"
		providedCompile  ("javax.servlet:javax.servlet-api:$servletApiVersion")
		compile "com.jayway.jsonpath:json-path:0.8.1"
		compile "org.springframework.security:spring-security-web:$springSecurityVersion" 
		compile "org.springframework.security:spring-security-config:$springSecurityVersion" 
		compile "javax.inject:javax.inject:$javaxInjectVersion"
		compile "net.sf.dozer:dozer:$dozerVersion"
		testCompile "org.springframework:spring-test:$springVersion"
		testCompile "org.hamcrest:hamcrest-all:1.1"
	}
        task release(dependsOn: assemble) << {
            copy {
                description "Copy artifacts to $rootDir/dist"
                from war.archivePath
                into file("$rootDir/dist") 
            }
        }
}

project('spring-nanotrader-web') {
	apply plugin: 'war'
	description = 'Spring Nanotrader Web'
	task tar(type: Tar) {
	  from 'src/main/webapp'
	  compression = Compression.GZIP
          destinationDir = file("build/libs")
	}
	artifacts {
	    archives tar
	}
	dependencies {
		// Spring Cloud
		compile "org.springframework.cloud:spring-cloud-spring-service-connector:$springCloudVersion"
		compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:$springCloudVersion"

		compile "org.springframework:spring-webmvc:$springVersion"
		providedCompile  ("javax.servlet:javax.servlet-api:$servletApiVersion")
		compile "javax.servlet:jstl:1.2"
		runtime "com.fasterxml.jackson.core:jackson-annotations:2.5.1"
		runtime "com.fasterxml.jackson.core:jackson-core:2.5.1"
		runtime "com.fasterxml.jackson.core:jackson-databind:2.5.1"
	}
        task release(dependsOn: assemble) << {
            copy {
                description "Copy artifacts to $rootDir/dist"
                from war.archivePath
                from tar.archivePath
                into file("$rootDir/dist") 
            }
        }
}


project('spring-nanotrader-asynch-services') {
	apply plugin: 'war'

	description = 'Spring Nanotrader Asynch Services'
	dependencies {
		compile project(":spring-nanotrader-service-support")
		compile "org.springframework:spring-webmvc:$springVersion"
		providedCompile  ("javax.servlet:javax.servlet-api:$servletApiVersion")
		compile "com.jayway.jsonpath:json-path:0.8.1"
		compile "javax.inject:javax.inject:$javaxInjectVersion"
		compile "net.sf.dozer:dozer:$dozerVersion"
		testCompile "org.springframework:spring-test:$springVersion"
	}
        task release(dependsOn: assemble) << {
            copy {
                description "Copy artifacts to $rootDir/dist"
                from war.archivePath
                into file("$rootDir/dist") 
            }
        }
}

apply plugin: 'sonar'

sonar {

	if (rootProject.hasProperty('sonarHostUrl')) {
		server.url = rootProject.sonarHostUrl
	}

	database {
		if (rootProject.hasProperty('sonarJdbcUrl')) {
			url = rootProject.sonarJdbcUrl
		}
		if (rootProject.hasProperty('sonarJdbcDriver')) {
			driverClassName = rootProject.sonarJdbcDriver
		}
		if (rootProject.hasProperty('sonarJdbcUsername')) {
			username = rootProject.sonarJdbcUsername
		}
		if (rootProject.hasProperty('sonarJdbcPassword')) {
			password = rootProject.sonarJdbcPassword
		}
	}

	project {
		dynamicAnalysis  = "reuseReports"
		withProjectProperties { props ->
			props["sonar.core.codeCoveragePlugin"] = "jacoco"
			props["sonar.jacoco.reportPath"]       = "${buildDirName}/jacoco.exec"
		}
	}

	logger.info("Sonar parameters used: server.url='${server.url}'; database.url='${database.url}'; database.driverClassName='${database.driverClassName}'; database.username='${database.username}'")

}

task api(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = rootProject.description
	options.overview = 'src/api/overview.html'
	source subprojects.collect { project ->
		project.sourceSets.main.allJava
	}
	destinationDir = new File(buildDir, "api")
	classpath = files(subprojects.collect { project ->
		project.sourceSets.main.compileClasspath
	})
}

task docsZip(type: Zip) {
	group = 'Distribution'
	classifier = 'docs'
	description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at static.springframework.org/spring-integration/docs."

	from('src/dist') { include 'changelog.txt' }

	from (api) { into 'api' }
}

task distZip(type: Zip, dependsOn: [docsZip]) {
	group = 'Distribution'
	classifier = 'dist'
	description = "Builds -${classifier} archive, containing all jars and docs, " +
			"suitable for community download page."

	ext.baseDir = "${project.name}-${project.version}";

	from('src/dist') {
		include 'readme.txt'
		include 'license.txt'
		include 'notice.txt'
		into "${baseDir}"
	}

	from(zipTree(docsZip.archivePath)) { into "${baseDir}/docs" }

	subprojects.each { subproject ->
		into ("${baseDir}/libs") {
			from subproject.jar
			from subproject.sourcesJar
			from subproject.javadocJar
		}
	}
}

artifacts {
	archives distZip
	archives docsZip
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs distribution archives.'
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.0-rc-1-20120409112701+0200'
	distributionUrl = 'http://services.gradle.org/distributions-snapshots/gradle-1.0-rc-1-20120409112701+0200-bin.zip'
	jarFile = '.wrapper/gradle-wrapper.jar'
}



    
    
def customizePom(def pom, def gradleProject) {
	pom.whenConfigured { generatedPom ->
		// respect 'optional' and 'provided' dependencies
		def deps = gradleProject.configurations.runtime.allDependencies
		def optionalDeps = deps.findAll { dep ->
			dep.asDynamicObject.hasProperty('optional') && dep.optional
		}
		def providedDeps = deps.findAll { dep ->
			dep.asDynamicObject.hasProperty('provided') && dep.provided
		}
		generatedPom.dependencies.each { mavenDep ->
			mavenDep.optional = optionalDeps.any { optionalDep ->
				optionalDep.group == mavenDep.groupId &&
						optionalDep.name == mavenDep.artifactId &&
						optionalDep.version == mavenDep.version
			}
			boolean isProvided = providedDeps.any { providedDep ->
				providedDep.group == mavenDep.groupId &&
						providedDep.name == mavenDep.artifactId &&
						providedDep.version == mavenDep.version
			}
			if (isProvided) {
				mavenDep.scope = 'provided'
			}
		}

		// eliminate test-scoped dependencies (no need in maven central poms)
		generatedPom.dependencies.removeAll { dep ->
			dep.scope == 'test'
		}

		// add all items necessary for maven central publication
		generatedPom.project {
			name = gradleProject.description
			description = gradleProject.description
			url = 'https://github.com/SpringSource/spring-nanotrader'
			organization {
				name = 'SpringSource'
				url = 'http://springsource.org'
			}
			licenses {
				license {
					name 'The Apache Software License, Version 2.0'
					url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					distribution 'repo'
				}
			}
			scm {
				url = 'https://github.com/SpringSource/nanotrader'
				connection = 'scm:git:git://github.com/SpringSource/nanotrader'
				developerConnection = 'scm:git:git://github.com/SpringSource/nanotrader'
			}
			developers {
				developer {
					id = 'dussab'
					name = 'Brian Dussault'
					email = 'bdussault@vmware.com'
				}
				developer {
					id = 'garyrussell'
					name = 'Gary Russell'
					email = 'grussell@vmware.com'
				}
			}
		}
	}
}

